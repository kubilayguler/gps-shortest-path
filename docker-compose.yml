services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: gps-postgres
    environment:
      POSTGRES_DB: gps_shortest_path
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gps-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps-backend
    environment:
      PORT: 5000
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: gps_shortest_path
      DB_USER: postgres
      DB_PASSWORD: postgres
      CORS_ORIGIN: http://localhost:3000
      JWT_SECRET: your_jwt_secret_change_in_production
      SESSION_SECRET: your_session_secret_change_in_production
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gps-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gps-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gps-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  gps-network:
    driver: bridge
